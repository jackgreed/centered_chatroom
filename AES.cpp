#include <iostream>
#include <iomanip>
#include <cstring>
#include <cstdint>

using namespace std;

// AES S-box
const uint8_t SBox[256] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, // 0
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, // 1
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, // 2
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, // 3
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, // 4
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, // 5
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, // 6
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, // 7
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, // 8
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, // 9
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, // a
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, // b
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, // c
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, // d
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, // e
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};
const uint8_t inv_s_box[256] = {
	// 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, // 0
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, // 1
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, // 2
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, // 3
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, // 4
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, // 5
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, // 6
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, // 7
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, // 8
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, // 9
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, // a
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, // b
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, // c
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, // d
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, // e
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d};
// Rcon（轮常量）
const uint8_t Rcon[10] = {
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
};

typedef uint8_t state_t[16];

// aes.cpp
#include "AES.h"
#include <cstring>

extern const uint8_t SBox[256];
extern const uint8_t inv_s_box[256];

static void AddRoundKey(state_t state, const uint8_t* roundKey) {
    for (int i = 0; i < 16; ++i)
        state[i] ^= roundKey[i];
}

static void SubBytes(state_t state) {
    for (int i = 0; i < 16; ++i)
        state[i] = SBox[state[i]];
}

static void ShiftRows(state_t state) {
    uint8_t temp;
    temp = state[1]; state[1] = state[5]; state[5] = state[9]; state[9] = state[13]; state[13] = temp;
    temp = state[2]; state[2] = state[10]; state[10] = temp;
    temp = state[6]; state[6] = state[14]; state[14] = temp;
    temp = state[3]; state[3] = state[15]; state[15] = state[11]; state[11] = state[7]; state[7] = temp;
}

static void MixColumns(state_t state) {
    uint8_t Tmp, Tm, t;
    for (int i = 0; i < 4; ++i) {
        int col = i * 4;
        t = state[col];
        Tmp = state[col] ^ state[col + 1] ^ state[col + 2] ^ state[col + 3];
        Tm = state[col] ^ state[col + 1]; Tm = (Tm << 1) ^ ((Tm & 0x80) ? 0x1b : 0x00); state[col] ^= Tm ^ Tmp;
        Tm = state[col + 1] ^ state[col + 2]; Tm = (Tm << 1) ^ ((Tm & 0x80) ? 0x1b : 0x00); state[col + 1] ^= Tm ^ Tmp;
        Tm = state[col + 2] ^ state[col + 3]; Tm = (Tm << 1) ^ ((Tm & 0x80) ? 0x1b : 0x00); state[col + 2] ^= Tm ^ Tmp;
        Tm = state[col + 3] ^ t; Tm = (Tm << 1) ^ ((Tm & 0x80) ? 0x1b : 0x00); state[col + 3] ^= Tm ^ Tmp;
    }
}

static void InvSubBytes(state_t state) {
    for (int i = 0; i < 16; ++i)
        state[i] = inv_s_box[state[i]];
}

static void InvShiftRows(state_t state) {
    uint8_t temp;
    temp = state[13]; state[13] = state[9]; state[9] = state[5]; state[5] = state[1]; state[1] = temp;
    temp = state[2]; state[2] = state[10]; state[10] = temp;
    temp = state[6]; state[6] = state[14]; state[14] = temp;
    temp = state[3]; state[3] = state[7]; state[7] = state[11]; state[11] = state[15]; state[15] = temp;
}

static uint8_t xtime(uint8_t x) {
    return (x << 1) ^ ((x >> 7) * 0x1b);
}

static uint8_t Multiply(uint8_t x, uint8_t y) {
    uint8_t result = 0;
    while (y) {
        if (y & 1) result ^= x;
        x = xtime(x);
        y >>= 1;
    }
    return result;
}

static void InvMixColumns(state_t state) {
    uint8_t t[4];
    for (int i = 0; i < 4; ++i) {
        int col = i * 4;
        t[0] = state[col];
        t[1] = state[col + 1];
        t[2] = state[col + 2];
        t[3] = state[col + 3];

        state[col]     = Multiply(t[0], 0x0e) ^ Multiply(t[1], 0x0b) ^ Multiply(t[2], 0x0d) ^ Multiply(t[3], 0x09);
        state[col + 1] = Multiply(t[0], 0x09) ^ Multiply(t[1], 0x0e) ^ Multiply(t[2], 0x0b) ^ Multiply(t[3], 0x0d);
        state[col + 2] = Multiply(t[0], 0x0d) ^ Multiply(t[1], 0x09) ^ Multiply(t[2], 0x0e) ^ Multiply(t[3], 0x0b);
        state[col + 3] = Multiply(t[0], 0x0b) ^ Multiply(t[1], 0x0d) ^ Multiply(t[2], 0x09) ^ Multiply(t[3], 0x0e);
    }
}

void KeyExpansion(const uint8_t* key, uint8_t* expandedKey) {
    uint8_t temp[4];
    int i = 0;
    while (i < 16) {
        expandedKey[i] = key[i];
        ++i;
    }
    i = 16;
    int rconIter = 1;
    while (i < 176) {
        for (int j = 0; j < 4; ++j)
            temp[j] = expandedKey[i - 4 + j];

        if (i % 16 == 0) {
            uint8_t k = temp[0];
            temp[0] = SBox[temp[1]] ^ Rcon[rconIter++];
            temp[1] = SBox[temp[2]];
            temp[2] = SBox[temp[3]];
            temp[3] = SBox[k];
        }

        for (int j = 0; j < 4; ++j) {
            expandedKey[i] = expandedKey[i - 16] ^ temp[j];
            ++i;
        }
    }
}

void AES_EncryptBlock(const uint8_t* input, const uint8_t* key, uint8_t* output) {
    state_t state;
    memcpy(state, input, 16);

    uint8_t expandedKey[176];
    KeyExpansion(key, expandedKey);

    AddRoundKey(state, expandedKey);
    for (int round = 1; round <= 9; ++round) {
        SubBytes(state);
        ShiftRows(state);
        MixColumns(state);
        AddRoundKey(state, expandedKey + round * 16);
    }
    SubBytes(state);
    ShiftRows(state);
    AddRoundKey(state, expandedKey + 160);

    memcpy(output, state, 16);
}

void AES_DecryptBlock(const uint8_t* input, const uint8_t* key, uint8_t* output) {
    state_t state;
    memcpy(state, input, 16);

    uint8_t expandedKey[176];
    KeyExpansion(key, expandedKey);

    AddRoundKey(state, expandedKey + 160);
    for (int round = 9; round >= 1; --round) {
        InvShiftRows(state);
        InvSubBytes(state);
        AddRoundKey(state, expandedKey + round * 16);
        InvMixColumns(state);
    }
    InvShiftRows(state);
    InvSubBytes(state);
    AddRoundKey(state, expandedKey);

    memcpy(output, state, 16);
}
std::string uint8ToString(uint8_t* input, size_t size) {
    std::string output;

    // 将每个 uint8_t 值转换回字符并加入字符串
    for (size_t i = 0; i < size; ++i) {
        output += static_cast<char>(input[i]);
    }

    return output;
}
std::string uint8ToNotString(uint8_t* input, size_t size) {
    std::string output;


    for (size_t i = 0; i < size; ++i) {
        unsigned int temp =input[i];
        output+=((temp/16)>=10?'A'+(temp/16-10):temp/16+'0');
        output+=((temp%16)>=10?'A'+(temp%16-10):temp%16+'0');
        //output += std::to_string((unsigned int)input[i]);
    }

    return output;
}
std::string AES_Encrypt(std::string input, std::string key) {
    size_t inputSize, keySize;
    while(input.size() % 16 != 0) {
        input += '\0'; // 填充到16的倍数
    }
    inputSize=input.size();
    while(key.size() % 16 != 0) {
        key += '\0'; // 填充到16的倍数
    }
    uint8_t* inputUint8 = (unsigned char*)input.c_str();
    uint8_t* keyUint8 = (unsigned char*)key.c_str();
    uint8_t outputUint8[16];
    std::string output="";
    int offset=0;
    while(inputSize>0){
        AES_EncryptBlock(inputUint8+offset, keyUint8, outputUint8);
        offset+=16;
        inputSize-=16;
        output += uint8ToNotString(outputUint8, 16);
    }
    //delete[] inputUint8;
    //delete[] keyUint8;
    return output;
}
string AES_Decrypt(std::string input, std::string key) {
    size_t inputSize, keySize;
    while(input.size() % 16 != 0) {
        input += '\0'; // 填充到16的倍数
    }
    inputSize=input.size()/2;
    while(key.size() % 16 != 0) {
        key += '\0'; // 填充到16的倍数
    }
    uint8_t* inputUint8 = (unsigned char*)input.c_str();

    for(int i=0,j=0;i<input.size();i+=2){
        unsigned int temp=0 ;
        temp+=(input[i]>='A'?(input[i]-'A'+10)*16:(input[i]-'0')*16);
        temp+=(input[i+1]>='A'?(input[i+1]-'A'+10):(input[i+1]-'0'));
        inputUint8[j]=(unsigned char)(temp);
        j++;
    }

    uint8_t* keyUint8 = (unsigned char*)key.c_str();
    uint8_t outputUint8[16];
    std::string output="";
    int offset=0;
    while(inputSize>0){
        AES_DecryptBlock(inputUint8+offset, keyUint8, outputUint8);
        offset+=16;
        inputSize-=16;
        output += uint8ToString(outputUint8, 16);
    }
    //delete[] inputUint8;
    //delete[] keyUint8;
    return output;
}
